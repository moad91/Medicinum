/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import java.awt.event.ItemEvent;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import models.Allergy;
import models.Drug;
import models.PatientInfo;
import models.User;
import models.dao.DAOFactory;

/**
 *
 * @author otm
 */
public class DBInsertPanel extends javax.swing.JPanel  implements ListSelectionListener{

     Drug drug;
    PatientInfo info;
    Allergy allergy;
    boolean updateTest=false;
    /**
     * Creates new form DBInsertPanel
     */
    public DBInsertPanel() {
          
        initComponents();
        
        update.setEnabled(false);
        delete.setEnabled(false);
        infos.setModel(TableModelBuilder.buildDBinfosTableModel(DAOFactory.getPatientInfoDAO().all()));
        drugs.setModel(TableModelBuilder.buildDBdrugsTableModel(DAOFactory.getDrugDAO().all()));
        allergies.setModel(TableModelBuilder.buildDBAllergiesTableModel(DAOFactory.getAllergyDAO().all()));
        ListSelectionModel selectionModelDrugs = drugs.getSelectionModel();
        ListSelectionModel selectionModelInfos = infos.getSelectionModel();
        ListSelectionModel selectionModelAllergies = allergies.getSelectionModel();
        selectionModelDrugs.addListSelectionListener(this);
        selectionModelInfos.addListSelectionListener(this);
        selectionModelAllergies.addListSelectionListener(this);
        
        
        LoginPanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DBinsert = new javax.swing.JPanel();
        insertContentPanel = new javax.swing.JPanel();
        choice = new javax.swing.JComboBox();
        text = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        allergies = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        infos = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        drugs = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        userConfig = new javax.swing.JButton();
        LoginPanel = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lastName = new javax.swing.JTextField();
        firstName = new javax.swing.JTextField();
        username = new javax.swing.JTextField();
        password = new javax.swing.JTextField();
        ajouter = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();

        insertContentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ajouter des Informations", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N

        choice.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Medicament", "Allergie", "Info" }));

        allergies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num", "Allergie"
            }
        ));
        jScrollPane1.setViewportView(allergies);

        infos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num", "Infos"
            }
        ));
        jScrollPane2.setViewportView(infos);

        drugs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num", "medicament"
            }
        ));
        jScrollPane3.setViewportView(drugs);

        addButton.setText("Ajouter");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        update.setText("modifier");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setText("supprimer");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        userConfig.setText("Compte Utilisateur");
        userConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userConfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout insertContentPanelLayout = new javax.swing.GroupLayout(insertContentPanel);
        insertContentPanel.setLayout(insertContentPanelLayout);
        insertContentPanelLayout.setHorizontalGroup(
            insertContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertContentPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(insertContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(userConfig)
                    .addGroup(insertContentPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, insertContentPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(insertContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, insertContentPanelLayout.createSequentialGroup()
                        .addComponent(text, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(215, 215, 215))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, insertContentPanelLayout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(update)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delete)
                        .addGap(225, 225, 225))))
        );
        insertContentPanelLayout.setVerticalGroup(
            insertContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, insertContentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(userConfig)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(insertContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(insertContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delete)
                    .addComponent(update)
                    .addComponent(addButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(insertContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout DBinsertLayout = new javax.swing.GroupLayout(DBinsert);
        DBinsert.setLayout(DBinsertLayout);
        DBinsertLayout.setHorizontalGroup(
            DBinsertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 738, Short.MAX_VALUE)
            .addGroup(DBinsertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(DBinsertLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(insertContentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        DBinsertLayout.setVerticalGroup(
            DBinsertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
            .addGroup(DBinsertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(DBinsertLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(insertContentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        title.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        title.setText("Ajouter un assistant");

        jLabel2.setText("Nom");

        jLabel3.setText("Prénom");

        jLabel4.setText("Username");

        jLabel5.setText("Password");

        ajouter.setText("Ajouter");
        ajouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouterActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Modifier Mon Compte");
        jToggleButton1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButton1ItemStateChanged(evt);
            }
        });

        jButton1.setText("Retour");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LoginPanelLayout = new javax.swing.GroupLayout(LoginPanel);
        LoginPanel.setLayout(LoginPanelLayout);
        LoginPanelLayout.setHorizontalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToggleButton1)
                    .addComponent(jButton1))
                .addContainerGap())
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(54, 54, 54)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(password, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addComponent(username)
                    .addComponent(firstName)
                    .addComponent(lastName))
                .addGap(278, 278, 278))
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addGap(226, 226, 226)
                .addComponent(ajouter)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        LoginPanelLayout.setVerticalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LoginPanelLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(title)
                        .addGap(49, 49, 49)
                        .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(firstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(LoginPanelLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton1)))
                .addGap(18, 18, 18)
                .addComponent(ajouter)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 17, Short.MAX_VALUE)
                .addComponent(DBinsert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 18, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(44, Short.MAX_VALUE)
                    .addComponent(LoginPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 7, Short.MAX_VALUE)
                .addComponent(DBinsert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(LoginPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        drug= new Drug();
        info= new PatientInfo();
        allergy= new Allergy();
        drugs.clearSelection();

        if(!text.getText().equalsIgnoreCase("")) {
            if(choice.getSelectedItem().toString().equalsIgnoreCase("Medicament"))
            {

                drug.setDrugName(text.getText());
                if(DAOFactory.getDrugDAO().create(drug)) {
                    text.setText("");
                    try {
                        drugs.setModel(TableModelBuilder.buildDBdrugsTableModel(DAOFactory.getDrugDAO().all()));
                    }catch(Exception e){
                        drugs.repaint();
                    }
                }
                SwingUtilities.updateComponentTreeUI(this);
                this.invalidate();
                this.validate();
                this.repaint();
            }else if(choice.getSelectedItem().toString().equalsIgnoreCase("Allergie")){
                allergy.setAllergyName(text.getText());
                if(DAOFactory.getAllergyDAO().create(allergy))
                {
                    text.setText("");
                    try {
                        allergies.setModel(TableModelBuilder.buildDBAllergiesTableModel(DAOFactory.getAllergyDAO().all()));
                    }catch(Exception e){
                        allergies.repaint();
                    }
                }
                SwingUtilities.updateComponentTreeUI(this);
                this.invalidate();
                this.validate();
                this.repaint();
            }else if(choice.getSelectedItem().toString().equalsIgnoreCase("Info")) {
                info.setProperty(text.getText());
                if(DAOFactory.getPatientInfoDAO().create(info)) {
                    text.setText("");
                    try {
                        infos.setModel(TableModelBuilder.buildDBinfosTableModel(DAOFactory.getPatientInfoDAO().all()));
                    }catch(Exception e){
                        infos.repaint();
                    }
                }
                SwingUtilities.updateComponentTreeUI(this);
                this.invalidate();
                this.validate();
                this.repaint();
            }
        }else {
            JOptionPane.showMessageDialog(this, "Le champ est vide", "Erreur", JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_addButtonActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        if(!text.getText().equalsIgnoreCase("")) {
            if(choice.getSelectedItem().toString().equalsIgnoreCase("Medicament"))
            {

                drug.setDrugName(text.getText());
                if(DAOFactory.getDrugDAO().update(drug)) {
                    text.setText("");
                    try {
                        drugs.setModel(TableModelBuilder.buildDBdrugsTableModel(DAOFactory.getDrugDAO().all()));
                    }catch(Exception e){
                        drugs.repaint();
                    }
                }
                SwingUtilities.updateComponentTreeUI(this);
                this.invalidate();
                this.validate();
                this.repaint();
            }else if(choice.getSelectedItem().toString().equalsIgnoreCase("Allergie")){
                allergy.setAllergyName(text.getText());
                if(DAOFactory.getAllergyDAO().update(allergy))
                {
                    text.setText("");
                    try {
                        allergies.setModel(TableModelBuilder.buildDBAllergiesTableModel(DAOFactory.getAllergyDAO().all()));
                    }catch(Exception e){
                        allergies.repaint();
                    }
                }
                SwingUtilities.updateComponentTreeUI(this);
                this.invalidate();
                this.validate();
                this.repaint();
            }else if(choice.getSelectedItem().toString().equalsIgnoreCase("Info")) {
                info.setProperty(text.getText());
                if(DAOFactory.getPatientInfoDAO().update(info)) {
                    text.setText("");
                    try {
                        infos.setModel(TableModelBuilder.buildDBinfosTableModel(DAOFactory.getPatientInfoDAO().all()));
                    }catch(Exception e){
                        allergies.repaint();
                    }
                }
                SwingUtilities.updateComponentTreeUI(this);
                this.invalidate();
                this.validate();
                this.repaint();
            }
        }else {
            JOptionPane.showMessageDialog(this, "Le champ est vide", "Erreur", JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed

        if(!text.getText().equalsIgnoreCase("")) {
            if(choice.getSelectedItem().toString().equalsIgnoreCase("Medicament"))
            {
                int val = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce médicament?", "Validation", JOptionPane.OK_CANCEL_OPTION);
                if(val == 0) {
                    if(DAOFactory.getDrugDAO().delete(drug)) {
                        text.setText("");
                        try{
                            drugs.setModel(TableModelBuilder.buildDBdrugsTableModel(DAOFactory.getDrugDAO().all()));
                        }catch(Exception e){
                            drugs.repaint();
                        }
                    }
                    SwingUtilities.updateComponentTreeUI(this);
                    this.invalidate();
                    this.validate();
                    this.repaint();
                }

            }else if(choice.getSelectedItem().toString().equalsIgnoreCase("Allergie")){
                int val = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer cette allergie?", "Validation", JOptionPane.OK_CANCEL_OPTION);
                if(val == 0) {
                    if(DAOFactory.getAllergyDAO().delete(allergy))
                    {
                        text.setText("");

                        try {
                            allergies.setModel(TableModelBuilder.buildDBAllergiesTableModel(DAOFactory.getAllergyDAO().all()));

                        }catch(Exception e){
                            allergies.repaint();
                        }

                    }
                    SwingUtilities.updateComponentTreeUI(this);
                    this.invalidate();
                    this.validate();
                    this.repaint();
                }
            }else if(choice.getSelectedItem().toString().equalsIgnoreCase("Info")) {
                int val = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer cet info?", "Validation", JOptionPane.OK_CANCEL_OPTION);
                if(val == 0) {
                    if(DAOFactory.getPatientInfoDAO().delete(info)) {
                        text.setText("");
                        try {
                            infos.setModel(TableModelBuilder.buildDBinfosTableModel(DAOFactory.getPatientInfoDAO().all()));
                        }catch(Exception e){
                            allergies.repaint();
                        }
                    }
                    SwingUtilities.updateComponentTreeUI(this);
                    this.invalidate();
                    this.validate();
                    this.repaint();
                }
            }
        }else {
            JOptionPane.showMessageDialog(this, "Le champ est vide", "Erreur", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_deleteActionPerformed

    private void ajouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouterActionPerformed
        if(lastName.getText().equalsIgnoreCase("") || firstName.getText().equalsIgnoreCase("") || username.getText().equals("") || password.getText().length()<6) {
            JOptionPane.showMessageDialog(this, "Tous les champs doivent être remplis et le mot de passe doit ere supérieur à 6 chars ", "Erreur", JOptionPane.ERROR_MESSAGE);

        }else { 
        if(!updateTest) {
            if(User.getConnectedUser().getRole().equals("docteur")) {

                User newUser= new User();
                newUser.setLastName(lastName.getText());
                newUser.setName(firstName.getText());
                newUser.setUsername(username.getText());
                newUser.setRole("assistant");
                
                newUser.setPassword(password.getText());
                
                if(DAOFactory.getUserDAO().findUser(newUser)<0) {

                    if(DAOFactory.getUserDAO().create(newUser)) {
                        JOptionPane.showMessageDialog(this, "Utilisateur créé avec succès ");
                    }else {
                        JOptionPane.showMessageDialog(this, "Erreur lors de la création","Erreur", JOptionPane.ERROR_MESSAGE);

                    }
                    lastName.setText("");
                    firstName.setText("");
                    username.setText("");
                    password.setText("");
                }else {

                    JOptionPane.showMessageDialog(this, "Utilisateur existe déjà","Erreur", JOptionPane.ERROR_MESSAGE);

                }

            }else {

                JOptionPane.showMessageDialog(this, "Vous n'avez pas le droit de création","Erreur", JOptionPane.ERROR_MESSAGE);

            }
        }
        if(updateTest)
        {
            User temp = new User();
            User.getConnectedUser().setLastName(lastName.getText());
            User.getConnectedUser().setName(firstName.getText());
            User.getConnectedUser().setUsername(username.getText());
            temp.setUsername(username.getText());

          
            User.getConnectedUser().setPassword(password.getText());
            temp.setPassword(password.getText());
            

            if(DAOFactory.getUserDAO().findUser(temp)<0 || temp.getUserId()==User.getConnectedUser().getUserId()) {
                if(DAOFactory.getUserDAO().update(User.getConnectedUser())) {
                    JOptionPane.showMessageDialog(this, "Utilisateur modifié avec succès ");
                }else {
                    JOptionPane.showMessageDialog(this, "Erreur lors de l'insertion","Erreur", JOptionPane.ERROR_MESSAGE);

                }
            }else {
                JOptionPane.showMessageDialog(this, "Utilisateur existe déjà","ereur", JOptionPane.ERROR_MESSAGE);
            }

        }
        }
    }//GEN-LAST:event_ajouterActionPerformed

    private void jToggleButton1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jToggleButton1ItemStateChanged
        if(evt.getStateChange()==ItemEvent.SELECTED){
            updateTest=true;
            ajouter.setText("Modifier");
            title.setText("Modifier Le Compte");
            jToggleButton1.setText("Ajouter un assistant");
            firstName.setText(User.getConnectedUser().getName());
            lastName.setText(User.getConnectedUser().getLastName());
            username.setText(User.getConnectedUser().getUsername());
        } else if(evt.getStateChange()==ItemEvent.DESELECTED){
            updateTest=false;
            ajouter.setText("Ajouter");
            title.setText("Ajouter un assistant");
            firstName.setText("");
            lastName.setText("");
            username.setText("");
            jToggleButton1.setText("Modifier Mon Compte");
        }
    }//GEN-LAST:event_jToggleButton1ItemStateChanged

    private void userConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userConfigActionPerformed
        LoginPanel.setVisible(true);
        DBinsert.setVisible(false);
       
    }//GEN-LAST:event_userConfigActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        LoginPanel.setVisible(false);
        DBinsert.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DBinsert;
    private javax.swing.JPanel LoginPanel;
    private javax.swing.JButton addButton;
    private javax.swing.JButton ajouter;
    private javax.swing.JTable allergies;
    private javax.swing.JComboBox choice;
    private javax.swing.JButton delete;
    private javax.swing.JTable drugs;
    private javax.swing.JTextField firstName;
    private javax.swing.JTable infos;
    private javax.swing.JPanel insertContentPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTextField lastName;
    private javax.swing.JTextField password;
    private javax.swing.JTextField text;
    private javax.swing.JLabel title;
    private javax.swing.JButton update;
    private javax.swing.JButton userConfig;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables

        @Override
    public void valueChanged(ListSelectionEvent e) {
        
        update.setEnabled(true);
        delete.setEnabled(true);
        if (e.getSource() == drugs.getSelectionModel() && e.getValueIsAdjusting()) {
            TableModel model = (TableModel)drugs.getModel();
            String num = String.valueOf(model.getValueAt(drugs.getSelectedRow(), 0));
            
           drug = DAOFactory.getDrugDAO().find(num);
           text.setText(drug.getDrugName());
           choice.setSelectedIndex(0);
           choice.setEditable(false);
           
        }
        
        if (e.getSource() == allergies.getSelectionModel() && e.getValueIsAdjusting()) {
            
            TableModel model = (TableModel)allergies.getModel();
            String num = String.valueOf(model.getValueAt(allergies.getSelectedRow(), 0));
           allergy = DAOFactory.getAllergyDAO().find(num);
           text.setText(allergy.getAllergyName());
           choice.setSelectedIndex(1);
           choice.setEditable(false);
           
           
        }
        
        if (e.getSource() == infos.getSelectionModel() && e.getValueIsAdjusting()) {
            
            TableModel model = (TableModel)infos.getModel();
            String num = String.valueOf(model.getValueAt(infos.getSelectedRow(), 0));
           info = DAOFactory.getPatientInfoDAO().findAlone(num);
           text.setText(info.getProperty());
           choice.setSelectedIndex(2);
           choice.setEditable(false);
        }
    
    }

}
